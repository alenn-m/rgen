package mysql

import (
    "{{.Root}}/models"
    "{{.Root}}/util/paginate"
    "github.com/jinzhu/gorm"
)

type {{.Model}}DB struct {
    client *gorm.DB
}

func New{{.Model}}DB(client *gorm.DB) *{{.Model}}DB {
    return &{{.Model}}DB{client: client}
}

func (u *{{.Model}}DB) FindByID(id models.{{.Model}}ID) (*models.{{.Model}}, error) {
    var item models.{{.Model}}

    err := u.client.Where("id = ?", id).Find(&item).Error

    return &item, err
}

func (u *{{.Model}}DB) ListAll(page int) ([]models.{{.Model}}, int, error) {
    var items []models.{{.Model}}

    err := paginate.Paginate(u.client.New(), page).Find(&items).Error
    if err != nil {
        return nil, 0, err
    }

    count := 0
    err = u.client.Model(&models.{{.Model}}{}).Count(&count).Error

    return items, count, err
}

func (u *{{.Model}}DB) Insert(item *models.{{.Model}}) (models.{{.Model}}ID, error) {
    err := u.client.Create(&item).Error

    return item.ID, err
}

func (u *{{.Model}}DB) Update(item *models.{{.Model}}) error {
    return u.client.Model(&item).Updates(item).Error
}

func (u *{{.Model}}DB) Delete(id models.{{.Model}}ID) error {
    return u.client.Where("id = ?", id).Delete(&models.{{.Model}}{}).Error
}
