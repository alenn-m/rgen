{{/*gotype: github.com/alenn-m/rgen/v2/generator/transport.parsedData*/}}
package {{.Package}}

import (
    "fmt"
    "net/http"
    "strconv"

    "{{.Root}}/util/req"
    "{{.Root}}/util/resp"
    "{{.Root}}/util/paginate"
    "{{.Root}}/models"
    "{{.Root}}/api/{{.Package}}/repositories/mysql"
    authService "{{.Root}}/util/auth"
    "github.com/go-chi/chi"
    "github.com/jmoiron/sqlx"
    "github.com/go-playground/validator/v10"
)

type API struct {
    svc Repository
}

var validate = validator.New()

const PREFIX = "{{.Prefix}}"

func New(router chi.Router, dbClient *sqlx.DB, authSvc *authService.AuthService) {
    a := API{svc: NewController(mysql.New{{.Model}}DB(dbClient), authSvc)}

    router = router.Route(fmt.Sprintf("/%s", PREFIX), func(r chi.Router) {
        {{ if ActionUsed "INDEX" }}
        // Index
        r.Get("/", a.index)
        {{ end }}
        {{ if ActionUsed "CREATE" }}
        // Create
        r.Post("/", a.store)
        {{ end }}
        {{ if ActionUsed "SHOW" }}
        // Show
        r.Get("/{id}", a.show)
        {{ end }}
        {{ if ActionUsed "UPDATE" }}
        // Update
        r.Put("/{id}", a.update)
        {{ end }}
        {{ if ActionUsed "DELETE" }}
        // Delete
        r.Delete("/{id}", a.delete)
        {{ end }}
    })
}
{{ if ActionUsed "INDEX" }}
func (a *API) index(w http.ResponseWriter, r *http.Request) {
    pReq := paginate.ParsePaginationReq(r)

    result, total, err := a.svc.Index(r.Context(), pReq.Page)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    resp.ReturnPaginatedSuccess(w, pReq.Page, total, result)
}
{{ end }}
{{ if ActionUsed "CREATE" }}
type StoreReq struct {
    {{.Fields}}
}

func (u *StoreReq) Validate() error {
    return validate.Struct(u)
}

func (a *API) store(w http.ResponseWriter, r *http.Request) {
    var storeReq StoreReq

    err := req.DecodeRequest(r, &storeReq)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusBadRequest)
        return
    }

    id, err := a.svc.Store(r.Context(), &storeReq)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    resp.ReturnSuccess(w, id)
}
{{ end }}
{{ if ActionUsed "SHOW" }}
func (a *API) show(w http.ResponseWriter, r *http.Request) {
    id, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 64)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    result, err := a.svc.Show(r.Context(), models.{{.Model}}ID(id))
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    resp.ReturnSuccess(w, result)
}
{{ end }}
{{ if ActionUsed "UPDATE" }}
type UpdateReq struct {
    {{.Fields}}
}

func (u *UpdateReq) Validate() error {
    return validate.Struct(u)
}

func (a *API) update(w http.ResponseWriter, r *http.Request) {
    var updateReq UpdateReq

    err := req.DecodeRequest(r, &updateReq)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusBadRequest)
        return
    }

    id, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 64)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    err = a.svc.Update(r.Context(), &updateReq, models.{{.Model}}ID(id))
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    resp.ReturnSuccess(w, nil)
}
{{ end }}
{{ if ActionUsed "DELETE" }}
func (a *API) delete(w http.ResponseWriter, r *http.Request) {
    id, err := strconv.ParseInt(chi.URLParam(r, "id"), 10, 64)
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    err = a.svc.Delete(r.Context(), models.{{.Model}}ID(id))
    if err != nil {
        resp.ReturnError(w, err.Error(), http.StatusInternalServerError)
        return
    }

    resp.ReturnSuccess(w, nil)
}
{{ end }}
